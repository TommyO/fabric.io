// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOOMParams creates a new GetOOMParams object
// with the default values initialized.
func NewGetOOMParams() *GetOOMParams {
	var (
		authorizationDefault = string("Bearer {access_token}")
	)
	return &GetOOMParams{
		Authorization: &authorizationDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOOMParamsWithTimeout creates a new GetOOMParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOOMParamsWithTimeout(timeout time.Duration) *GetOOMParams {
	var (
		authorizationDefault = string("Bearer {access_token}")
	)
	return &GetOOMParams{
		Authorization: &authorizationDefault,

		timeout: timeout,
	}
}

// NewGetOOMParamsWithContext creates a new GetOOMParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOOMParamsWithContext(ctx context.Context) *GetOOMParams {
	var (
		authorizationDefault = string("Bearer {access_token}")
	)
	return &GetOOMParams{
		Authorization: &authorizationDefault,

		Context: ctx,
	}
}

// NewGetOOMParamsWithHTTPClient creates a new GetOOMParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOOMParamsWithHTTPClient(client *http.Client) *GetOOMParams {
	var (
		authorizationDefault = string("Bearer {access_token}")
	)
	return &GetOOMParams{
		Authorization: &authorizationDefault,
		HTTPClient:    client,
	}
}

/*GetOOMParams contains all the parameters to send to the API endpoint
for the get o o m operation typically these are written to a http.Request
*/
type GetOOMParams struct {

	/*Authorization*/
	Authorization *string
	/*Body*/
	Body *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get o o m params
func (o *GetOOMParams) WithTimeout(timeout time.Duration) *GetOOMParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get o o m params
func (o *GetOOMParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get o o m params
func (o *GetOOMParams) WithContext(ctx context.Context) *GetOOMParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get o o m params
func (o *GetOOMParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get o o m params
func (o *GetOOMParams) WithHTTPClient(client *http.Client) *GetOOMParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get o o m params
func (o *GetOOMParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get o o m params
func (o *GetOOMParams) WithAuthorization(authorization *string) *GetOOMParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get o o m params
func (o *GetOOMParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithBody adds the body to the get o o m params
func (o *GetOOMParams) WithBody(body *string) *GetOOMParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get o o m params
func (o *GetOOMParams) SetBody(body *string) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *GetOOMParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
