// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetActiveNow gets active now
*/
func (a *Client) GetActiveNow(params *GetActiveNowParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveNowParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetActiveNow",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{ResponseBodyPath}/apps/{app_id}/growth_analytics/active_now.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActiveNowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAllApps gets all apps
*/
func (a *Client) GetAllApps(params *GetAllAppsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAppsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllApps",
		Method:             "GET",
		PathPattern:        "/api/v2/apps",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAllBuilds gets all builds
*/
func (a *Client) GetAllBuilds(params *GetAllBuildsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllBuilds",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{ResponseBodyPath}/apps/{app_id}/beta_distribution/releases/{release_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetDailyActive gets daily active
*/
func (a *Client) GetDailyActive(params *GetDailyActiveParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDailyActiveParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDailyActive",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{ResponseBodyPath}/apps/{app_id}/growth_analytics/daily_active.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDailyActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetDailyNew gets daily new
*/
func (a *Client) GetDailyNew(params *GetDailyNewParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDailyNewParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDailyNew",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{ResponseBodyPath}/apps/{app_id}/growth_analytics/daily_new.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDailyNewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetOOM gets o o m
*/
func (a *Client) GetOOM(params *GetOOMParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOOMParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOOM",
		Method:             "POST",
		PathPattern:        "/graphql",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOOMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetOrganization gets organization
*/
func (a *Client) GetOrganization(params *GetOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganization",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSessionCount gets sessions count
*/
func (a *Client) GetSessionCount(params *GetSessionCountParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionCountParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSessionCount",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{ResponseBodyPath}/apps/{app_id}/growth_analytics/total_sessions_scalar.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSessionCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSingleApp gets single app
*/
func (a *Client) GetSingleApp(params *GetSingleAppParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleAppParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSingleApp",
		Method:             "GET",
		PathPattern:        "/api/v2/apps/{app_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSingleBuild gets single build
*/
func (a *Client) GetSingleBuild(params *GetSingleBuildParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleBuildParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSingleBuild",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{ResponseBodyPath}/apps/{app_id}/beta_distribution/releases",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetTopBuilds gets top builds
*/
func (a *Client) GetTopBuilds(params *GetTopBuildsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopBuildsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTopBuilds",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{ResponseBodyPath}/apps/{app_id}/growth_analytics/top_builds",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTopBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
OAuth os auth
*/
func (a *Client) OAuth(params *OAuthParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOAuthParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OAuth",
		Method:             "POST",
		PathPattern:        "/oauth/token",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
