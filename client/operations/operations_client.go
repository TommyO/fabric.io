// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Active gets daily weekly or monthly active
*/
func (a *Client) Active(params *ActiveParams) (*ActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Active",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{organization_id}/apps/{app_id}/growth_analytics/{period}_active.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ActiveOK), nil

}

/*
ActiveNow gets active now
*/
func (a *Client) ActiveNow(params *ActiveNowParams) (*ActiveNowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActiveNowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ActiveNow",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{organization_id}/apps/{app_id}/growth_analytics/active_now.json",
		ProducesMediaTypes: []string{"text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActiveNowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ActiveNowOK), nil

}

/*
App gets single app
*/
func (a *Client) App(params *AppParams) (*AppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "App",
		Method:             "GET",
		PathPattern:        "/api/v2/apps/{app_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppOK), nil

}

/*
Apps gets all apps
*/
func (a *Client) Apps(params *AppsParams) (*AppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Apps",
		Method:             "GET",
		PathPattern:        "/api/v2/apps",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AppsOK), nil

}

/*
DailyNew gets daily new
*/
func (a *Client) DailyNew(params *DailyNewParams) (*DailyNewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyNewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyNew",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{organization_id}/apps/{app_id}/growth_analytics/daily_new.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyNewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DailyNewOK), nil

}

/*
OAuth gets authorization token
*/
func (a *Client) OAuth(params *OAuthParams) (*OAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OAuth",
		Method:             "POST",
		PathPattern:        "/oauth/token",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OAuthOK), nil

}

/*
Organizations gets organizations
*/
func (a *Client) Organizations(params *OrganizationsParams) (*OrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Organizations",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations",
		ProducesMediaTypes: []string{"text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrganizationsOK), nil

}

/*
SessionsCount gets sessions count
*/
func (a *Client) SessionsCount(params *SessionsCountParams) (*SessionsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionsCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SessionsCount",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{organization_id}/apps/{app_id}/growth_analytics/total_sessions_scalar.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SessionsCountOK), nil

}

/*
TimeInApp times in app per user
*/
func (a *Client) TimeInApp(params *TimeInAppParams) (*TimeInAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeInAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeInApp",
		Method:             "GET",
		PathPattern:        "/api/v2/organizations/{organization_id}/apps/{app_id}/growth_analytics/time_in_app_per_dau.json",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeInAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TimeInAppOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
